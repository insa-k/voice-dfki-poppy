buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.0'
    id 'de.undercouch.download' version '3.1.0'
}

group 'de.dfki.mary'
version '5.2-SNAPSHOT'

voice {
    name = 'dfki-poppy'
    language = 'en'
    region = 'GB'
    gender = 'female'
    type = 'unit selection'
    description = 'A female British English expressive unit selection voice: Cheerful Poppy'
    license {
        name = 'Creative Commons Attribution-NoDerivs 3.0 Unported'
        shortName = 'CC-BY-ND'
        url = 'http://mary.dfki.de/download/by-nd-3.0.html'
    }
    samplingRate = 16000
}

ext {
    flacFile = file("$buildDir/dfki-poppy-data.flac")
    yamlFile = file("$buildDir/dfki-poppy-data.yaml")
}

import de.undercouch.gradle.tasks.download.Download
import org.yaml.snakeyaml.Yaml

task downloadAudio(type: Download) {
    src "https://github.com/marytts/dfki-semaine-data/releases/download/v0.1/$flacFile.name"
    dest flacFile
    overwrite false
    acceptAnyCertificate true
}

task downloadData(type: Download) {
    src "https://github.com/marytts/dfki-semaine-data/releases/download/v0.1/$yamlFile.name"
    dest yamlFile
    overwrite false
    acceptAnyCertificate true
}

task extractLab {
    dependsOn downloadData
    def destDir = file("$buildDir/lab")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.lab").withWriter { writer ->
                    writer.println '#'
                    utterance.segments.each { segment ->
                        writer.println "$segment.end 125 $segment.lab"
                    }
                }
            }
        }
    }
}

task extractText {
    dependsOn downloadData
    def destDir = file("$buildDir/text")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.txt").withWriter { writer ->
                    writer.println utterance.text
                }
            }
        }
    }
}
